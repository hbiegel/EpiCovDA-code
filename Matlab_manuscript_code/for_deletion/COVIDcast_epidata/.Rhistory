state_JHU_df <- rbind(state_JHU_df,tempJHU)
}
state_JHU_df$positiveIncrease <- 0;
state_JHU_df$positiveIncrease[-1] <- state_JHU_df$Confirmed[-1] -
state_JHU_df$Confirmed[-num_days]
state_JHU_df$deathIncrease <- 0;
state_JHU_df$deathIncrease[-1] <- state_JHU_df$Deaths[-1] -
state_JHU_df$Deaths[-num_days]
state_JHU_df$hospitalizedIncrease <- 0;
state_JHU_df$hospitalizedIncrease[-1] <- state_JHU_df$People_Hospitalized[-1] -
state_JHU_df$People_Hospitalized[-num_days]
names(state_JHU_df) <- c("date","state","positive","death","hospitalized",
"positiveIncrease","deathIncrease",
"hospitalizedIncrease")
curr_abbrev <- state2abbr(state_JHU_df$state[1])
state_JHU_df <- state_JHU_df[-1,c("date","positive","death",
"positiveIncrease","deathIncrease",
"hospitalized","hospitalizedIncrease")]
JHU_save_name <- sprintf("../state_hosp_data/JHU_state_%s.csv",curr_abbrev)
write.csv(state_JHU_df,JHU_save_name,row.names=FALSE)
# plot(state_JHU_df$day,state_JHU_df$Deaths,main=state_JHU_df$Province_State[1])
}
library(cdlTools)
# save most recent US totals (aka sum over states)
num_days = length(all_file_names)
all_fips = c(1,2,4:6,8:13,15:42,44:51,53:56)
state_id <- fips(state_fips,to="abbreviation")
load_name <- sprintf("../state_hosp_data/JHU_state_%s.csv",state_id)
curr_data <- read.csv(load_name)
us_totals <- as.matrix(curr_data[,-1])
for (state_fips in all_fips[-1]){
state_id <- fips(state_fips,to="abbreviation")
load_name <- sprintf("../state_hosp_data/JHU_state_%s.csv",state_id)
curr_data <- read.csv(load_name)
m_data <- as.matrix(curr_data[,-1])
us_totals <- us_totals + m_data
}
us_JHU_df <- data.frame(us_totals)
us_JHU_df<- cbind(curr_data$date,us_JHU_df)
names(us_JHU_df) <- c("date",names(us_JHU_df)[-1])
write.csv(us_JHU_df,"../state_hosp_data/JHU_state_us.csv",row.names=FALSE)
curr_levels = read.csv("../cdc_data/covid_activity_4_10.csv")
curr_levels$intervention_date <- as.Date(as.character(curr_levels$intervention_date),
format="%Y%m%d")
curr_levels$int_DY = as.numeric(strftime(curr_levels$intervention_date,format="%j"))
curr_levels$case_ratio = curr_levels$cases_4_10/curr_levels$population*10^5 #per 100,000
state_abbr <- as.character(curr_levels$abbrev)
curr_levels$above_500 <- 0
curr_levels$above_500_date <- as.Date("2020-04-11")
for (i in 1:length(state_abbr)){
temp_sub = subset(curr_state_data,state==state_abbr[i])
temp_sub = temp_sub[order(temp_sub$date),]
t1 <- temp_sub[temp_sub$positive>500,"date"]
curr_levels$above_500[i] <- as.numeric(strftime(t1[1],format="%j"))
curr_levels$above_500_date[i] <- t1[1]
}
View(curr_levels)
# install.packages(c("httr", "jsonlite"))
library("httr")
library("jsonlite")
res = GET("https://covidtracking.com/api/v1/states/daily.json")
curr_state_data = fromJSON(rawToChar(res$content))
library("MMWRweek")
curr_state_data$date <- as.Date(as.character(curr_state_data$date),format="%Y%m%d")
curr_levels = read.csv("../cdc_data/covid_activity_4_10.csv")
curr_levels$intervention_date <- as.Date(as.character(curr_levels$intervention_date),
format="%Y%m%d")
curr_levels$int_DY = as.numeric(strftime(curr_levels$intervention_date,format="%j"))
curr_levels$case_ratio = curr_levels$cases_4_10/curr_levels$population*10^5 #per 100,000
state_abbr <- as.character(curr_levels$abbrev)
curr_levels$above_500 <- 0
curr_levels$above_500_date <- as.Date("2020-04-11")
for (i in 1:length(state_abbr)){
temp_sub = subset(curr_state_data,state==state_abbr[i])
temp_sub = temp_sub[order(temp_sub$date),]
t1 <- temp_sub[temp_sub$positive>500,"date"]
curr_levels$above_500[i] <- as.numeric(strftime(t1[1],format="%j"))
curr_levels$above_500_date[i] <- t1[1]
}
curr_levels$above_1000 <- 0
curr_levels$above_1000_date <- as.Date("2020-04-11")
for (i in 1:length(state_abbr)){
temp_sub = subset(curr_state_data,state==state_abbr[i])
temp_sub = temp_sub[order(temp_sub$date),]
t1 <- temp_sub[temp_sub$positive>1000,"date"]
curr_levels$above_1000[i] <- as.numeric(strftime(t1[1],format="%j"))
curr_levels$above_1000_date[i] <- t1[1]
}
curr_levels$above_100 <- 0
curr_levels$above_100_date <- as.Date("2020-04-11")
for (i in 1:length(state_abbr)){
temp_sub = subset(curr_state_data,state==state_abbr[i])
temp_sub = temp_sub[order(temp_sub$date),]
t1 <- temp_sub[temp_sub$positive>100,"date"]
curr_levels$above_100[i] <- as.numeric(strftime(t1[1],format="%j"))
curr_levels$above_100_date[i] <- t1[1]
}
mod2 <- lm(log(curr_levels$cases_4_10)~curr_levels$int_DY+curr_levels$above_1000+curr_levels$above_100)
summary(mod2)
plot(mod2)
library(car)
library(ggbiplot)
library(plotly)
temp_preds <- na.omit(curr_levels[,c("abbrev","cases_4_10","int_DY","above_500","above_1000","above_100")])
pairs(temp_preds)
new_temp <- data.frame(curr_levels[,c("abbrev")])
names(new_temp) <- "abbrev"
new_temp$diff100To500 <- curr_levels$above_500-curr_levels$above_100
new_temp$diff500ToInt <- curr_levels$int_DY - curr_levels$above_500
ggplot(new_temp)+
geom_text(mapping=aes(x=diff100To500,y=diff500ToInt,label = abbrev))
test_pca <- prcomp(temp_preds[,c(-1,-2)])
ggbiplot(test_pca,ellipse=TRUE,ellipse.prob = .95,labels=temp_preds$abbrev,obs.scale = 1,
choices=c(1,2))
ggplot(temp_preds)+
# geom_point(mapping=aes(above_1000,int_DY))+
geom_text(aes(above_1000,int_DY,label=temp_preds$abbrev))+
geom_text(aes(above_500,int_DY,label=temp_preds$abbrev),color="red")+
geom_abline(slope=1,intercept=0)
plot(x=c(75,105),y=c(75,105))
#
# plot_ly() %>%
#   add_trace(x=temp_preds$above_100,y=temp_preds$above_1000,z=temp_preds$int_DY, type="scatter3d",mode="text",
#         text = temp_preds$abbrev) %>%
#   layout(
#     title = "Data projected into first 3 principal components",
#     scene = list(
#       xaxis = list(title = "above_100"),
#       yaxis = list(title = "above_1000"),
#       zaxis = list(title = "int_DY")
#     ))
View(temp_preds)
# Compare Forecast Performance
source('~/Dropbox/UA/Research/HRB_COVID_code_v2/r_code/forecast_performance_functions.R')
require(ggplot2)
# Created 7/20/20
v1_scores = read.csv('/Users/hannah.biegel/Dropbox/UA/Research/HRB_COVID_code_v2/r_code/UA-EpiCovDA_v1_fixedSmoothing-3-5-14/all_scores.csv')
v2_scores = read.csv('/Users/hannah.biegel/Dropbox/UA/Research/HRB_COVID_code_v2/r_code/UA-EpiCovDA_v2_fixedSmoothing-3-5-14/all_scores.csv')
v1_Cstart_scores = read.csv('/Users/hannah.biegel/Dropbox/UA/Research/HRB_COVID_code_v2/r_code/UA-EpiCovDA_v1_Cstart-3-5-14/all_scores.csv')
# exclude CO 2020-05-10 predictions
v2_scores = subset(v2_scores,(location != "CO")|
(forecast_date != '2020-05-10') )
v2_scores = subset(v2_scores,(location != "US") )
v1_scores = subset(v1_scores,(location != "CO")|
(forecast_date != '2020-05-10'))
v1_scores = subset(v1_scores,(location != "US") )
v1_Cstart_scores = subset(v1_Cstart_scores,(location != "CO")|
(forecast_date != '2020-05-10'))
v1_Cstart_scores = subset(v1_Cstart_scores,(location != "US") )
v2_scores$abs_rel_error = abs(v2_scores$relative_error)
v1_scores$abs_rel_error = abs(v1_scores$relative_error)
v1_Cstart_scores$abs_rel_error = abs(v1_Cstart_scores$relative_error)
v2_scores$forecast_date = as.Date(v2_scores$forecast_date)
v2_scores$target_end_date = as.Date(v2_scores$target_end_date)
v1_scores$forecast_date = as.Date(v1_scores$forecast_date)
v1_scores$target_end_date = as.Date(v1_scores$target_end_date)
v1_Cstart_scores$forecast_date = as.Date(v1_Cstart_scores$forecast_date)
v1_Cstart_scores$target_end_date = as.Date(v1_Cstart_scores$target_end_date)
v1_scores$abs_error = abs(v1_scores$error)
v1_Cstart_scores$abs_error = abs(v1_Cstart_scores$error)
v2_scores$abs_error = abs(v2_scores$error)
version_differences <- v1_scores[,c("location","target","forecast_date","target_end_date")]
version_differences$V1minusV2rel <- v1_scores$abs_rel_error - v2_scores$abs_rel_error
version_differences$V1minusV2error <- v1_scores$abs_error - v2_scores$abs_error
version_differences$V1minusV1Cstartrel <- v1_scores$abs_rel_error - v1_Cstart_scores$abs_rel_error
version_differences$V1minusV1Cstarterror <- v1_scores$abs_error - v1_Cstart_scores$abs_error
version_differences$V1CstartminusV2rel <- v1_Cstart_scores$abs_rel_error - v2_scores$abs_rel_error
version_differences$V1CstartminusV2error <- v1_Cstart_scores$abs_error - v2_scores$abs_error
mean(version_differences$V1minusV2rel)
ggplot()+
geom_point(data=version_differences,
mapping = aes(V1minusV2error,location))
ggplot()+
geom_point(data=version_differences,
mapping = aes(V1minusV1Cstarterror,location))
ggplot()+
geom_point(data=version_differences,
mapping = aes(V1CstartminusV2error,location))
ggplot()+
geom_point(data=version_differences,
mapping = aes(V1minusV2rel,location))
ggplot()+
geom_point(data=version_differences,
mapping = aes(V1minusV1Cstartrel,location))
ggplot()+
geom_point(data=version_differences,
mapping = aes(V1CstartminusV2rel,location))
plotVersionWkAheadPerformance(v1_scores)
v1_statistics <- c(mean_abs(v1_scores,"error"),
median_abs(v1_scores,"error"),
mean_abs(v1_scores,"relative_error"),
median_abs(v1_scores,"relative_error"),
mean_abs(v1_scores,"error","1 wk ahead cum death"),
median_abs(v1_scores,"error","1 wk ahead cum death"),
mean_abs(v1_scores,"error","2 wk ahead cum death"),
median_abs(v1_scores,"error","2 wk ahead cum death"),
mean_abs(v1_scores,"error","3 wk ahead cum death"),
median_abs(v1_scores,"error","3 wk ahead cum death"),
mean_abs(v1_scores,"error","4 wk ahead cum death"),
median_abs(v1_scores,"error","4 wk ahead cum death"),
mean_abs(v1_scores,"relative_error","1 wk ahead cum death"),
median_abs(v1_scores,"relative_error","1 wk ahead cum death"),
mean_abs(v1_scores,"relative_error","2 wk ahead cum death"),
median_abs(v1_scores,"relative_error","2 wk ahead cum death"),
mean_abs(v1_scores,"relative_error","3 wk ahead cum death"),
median_abs(v1_scores,"relative_error","3 wk ahead cum death"),
mean_abs(v1_scores,"relative_error","4 wk ahead cum death"),
median_abs(v1_scores,"relative_error","4 wk ahead cum death"))
v1_Cstart_statistics <- c(mean_abs(v1_Cstart_scores,"error"),
median_abs(v1_Cstart_scores,"error"),
mean_abs(v1_Cstart_scores,"relative_error"),
median_abs(v1_Cstart_scores,"relative_error"),
mean_abs(v1_Cstart_scores,"error","1 wk ahead cum death"),
median_abs(v1_Cstart_scores,"error","1 wk ahead cum death"),
mean_abs(v1_Cstart_scores,"error","2 wk ahead cum death"),
median_abs(v1_Cstart_scores,"error","2 wk ahead cum death"),
mean_abs(v1_Cstart_scores,"error","3 wk ahead cum death"),
median_abs(v1_Cstart_scores,"error","3 wk ahead cum death"),
mean_abs(v1_Cstart_scores,"error","4 wk ahead cum death"),
median_abs(v1_Cstart_scores,"error","4 wk ahead cum death"),
mean_abs(v1_Cstart_scores,"relative_error","1 wk ahead cum death"),
median_abs(v1_Cstart_scores,"relative_error","1 wk ahead cum death"),
mean_abs(v1_Cstart_scores,"relative_error","2 wk ahead cum death"),
median_abs(v1_Cstart_scores,"relative_error","2 wk ahead cum death"),
mean_abs(v1_Cstart_scores,"relative_error","3 wk ahead cum death"),
median_abs(v1_Cstart_scores,"relative_error","3 wk ahead cum death"),
mean_abs(v1_Cstart_scores,"relative_error","4 wk ahead cum death"),
median_abs(v1_Cstart_scores,"relative_error","4 wk ahead cum death"))
v2_statistics <- c(mean_abs(v2_scores,"error"),
median_abs(v2_scores,"error"),
mean_abs(v2_scores,"relative_error"),
median_abs(v2_scores,"relative_error"),
mean_abs(v2_scores,"error","1 wk ahead cum death"),
median_abs(v2_scores,"error","1 wk ahead cum death"),
mean_abs(v2_scores,"error","2 wk ahead cum death"),
median_abs(v2_scores,"error","2 wk ahead cum death"),
mean_abs(v2_scores,"error","3 wk ahead cum death"),
median_abs(v2_scores,"error","3 wk ahead cum death"),
mean_abs(v2_scores,"error","4 wk ahead cum death"),
median_abs(v2_scores,"error","4 wk ahead cum death"),
mean_abs(v2_scores,"relative_error","1 wk ahead cum death"),
median_abs(v2_scores,"relative_error","1 wk ahead cum death"),
mean_abs(v2_scores,"relative_error","2 wk ahead cum death"),
median_abs(v2_scores,"relative_error","2 wk ahead cum death"),
mean_abs(v2_scores,"relative_error","3 wk ahead cum death"),
median_abs(v2_scores,"relative_error","3 wk ahead cum death"),
mean_abs(v2_scores,"relative_error","4 wk ahead cum death"),
median_abs(v2_scores,"relative_error","4 wk ahead cum death"))
plotVersionWkAheadPerformance(v2_scores,val = "abs_error",tar = "1 wk ahead cum death",
title ="Version 2, 1 wk ahead cum death, abs_error")
plotVersionDifference(version_differences,"V1minusV2error",
tar = "1 wk ahead cum death",
title = "V1 Minus V2")
plotVersionDifference(version_differences,"V1minusV2rel",
tar = "1 wk ahead cum death",
title = "V1 Minus V2 Relative")
plotVersionDifference(version_differences,"V1minusV1Cstarterror",
tar = "2 wk ahead cum death",
title = "V1 Minus V1 Cstart")
plotVersionDifference(version_differences,"V1minusV1Cstartrel",
tar = "1 wk ahead cum death",
title = "V1 Minus V1 Cstart Relative")
ggplot()+
geom_point(data=version_differences,
mapping = aes(V1minusV2rel,location))
#
#
#
#
#
#
#
#
#
#
# require(ggplot2)
# require(scales)
# ggplot()+
#   geom_tile(data = v2_scores,mapping = aes(forecast_date,location,fill=abs_rel_error)) +
#   scale_colour_gradient2(low="white",mid="skyblue",high="black",limits=c(0,1),midpoint=.5,na.value="firebrick3")
#
#
# ggplot()+
#   geom_tile(data = v1_scores[v1_scores$target=="1 wk ahead cum death",],
#             mapping = aes(forecast_date,location,
#                           fill=v1_scores[v1_scores$target=="1 wk ahead cum death","abs_rel_error"])) +
#   scale_colour_gradient2(low="white",mid="skyblue",high="black",
#                          limits=c(0,1),midpoint=0.5,na.value="firebrick3")
#
# ggplot()+
#   geom_tile(data = v1_Cstart_scores,mapping =
#               aes(forecast_date,location,fill=abs_rel_error)) +
#   scale_fill_gradient2(low="white",mid="skyblue",high="black",
#                          limits=c(0,1),midpoint=.5,na.value="firebrick3")+
#   theme_bw()+
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#
#
# ggplot()+
#   geom_tile(data = v1_Cstart_scores[v1_Cstart_scores$target=="1 wk ahead cum death",],mapping =
#               aes(forecast_date,location,fill=abs_rel_error)) +
#   scale_fill_gradient2(low="white",mid="skyblue",high="black",
#                        limits=c(0,1),midpoint=.5,na.value="firebrick3")+
#   theme_bw()+
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#
# ggplot()+
#   geom_tile(data = v1_scores[v1_scores$target=="1 wk ahead cum death",],mapping =
#               aes(forecast_date,location,fill=abs_rel_error)) +
#   scale_fill_gradient2(low="white",mid="skyblue",high="black",
#                        limits=c(0,1),midpoint=.5,na.value="firebrick3")+
#   theme_bw()+
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#
#
#
#
#
# ggplot()+
#   geom_point(data = v1_scores,mapping = aes(forecast_date,location,color=abs_rel_error),size=2)  +
#   scale_colour_gradient2(low="white",mid="blue",high="black",limits=c(0,1),midpoint=.5,na.value="firebrick3")
#
# v1_scores$diff_rel_error = v1_scores$abs_rel_error - v2_scores$abs_rel_error
#
#
#
#
#
# # one week ahead
# ggplot()+
#   geom_tile(data = v1_scores[v1_scores$target=="1 wk ahead cum death",],mapping =
#               aes(forecast_date,location,fill=diff_rel_error)) +
#   scale_fill_gradient2(low = "firebrick3",mid="white",high="blue",
#                        limits=c(-1,1),midpoint=0,na.value="black")+
#   theme_bw()+
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#
# # two week ahead
# ggplot()+
#   geom_tile(data = v1_scores[v1_scores$target=="2 wk ahead cum death",],mapping =
#               aes(forecast_date,location,fill=diff_rel_error)) +
#   scale_fill_gradient2(low = "firebrick3",mid="white",high="blue",
#                        limits=c(-1,1),midpoint=0,na.value="black")+
#   theme_bw()+
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#
# # three week ahead
# ggplot()+
#   geom_tile(data = v1_scores[v1_scores$target=="3 wk ahead cum death",],mapping =
#               aes(forecast_date,location,fill=diff_rel_error)) +
#   scale_fill_gradient2(low = "firebrick3",mid="white",high="blue",
#                        limits=c(-1,1),midpoint=0,na.value="black")+
#   theme_bw()+
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#
# # 4 week ahead
# ggplot()+
#   geom_tile(data = v1_scores[v1_scores$target=="4 wk ahead cum death",],mapping =
#               aes(forecast_date,location,fill=diff_rel_error)) +
#   scale_fill_gradient2(low = "firebrick3",mid="white",high="blue",
#                        limits=c(-1,1),midpoint=0,na.value="black")+
#   theme_bw()+
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#
#
#
#
#
# ggplot()+
#   geom_point(data=v1_scores[v1_scores$target == "4 wk ahead cum death",],
#              mapping=aes(target_end_date,abs_rel_error),cex=3) +
#   geom_point(data=v1_Cstart_scores[v2_scores$target == "4 wk ahead cum death",],
#              mapping=aes(target_end_date,abs_rel_error),col = "red")
plotVersionDifference(version_differences,"V1minusV2error",
tar = "1 wk ahead cum death",
title = "V1 Minus V2")
plotVersionDifference(version_differences,"V1minusV2rel",
tar = "1 wk ahead cum death",
title = "V1 Minus V2")
source('~/Dropbox/UA/Research/HRB_COVID_code_v2/r_code/forecast_performance_functions.R')
plotVersionDifference(version_differences,"V1minusV2rel",
tar = "1 wk ahead cum death",
title = "V1 Minus V2")
# COVIDcast EpiData
# Updated 11/11/20
# # To install with vignettes:
# devtools::install_github("cmu-delphi/covidcast", ref = "main",
#                          subdir = "R-packages/covidcast",
#                          build_vignettes = TRUE,
#                          dependencies = TRUE)
# # To install without vignettes:
# devtools::install_github("cmu-delphi/covidcast", ref = "main",
#                          subdir = "R-packages/covidcast")
library(covidcast)
library(dplyr)
setwd("~/Dropbox/Research-Materials-Hannah/covid_related/COVIDcast_epidata")
# # Example of downloading data
# covidcast_signal(data_source = "doctor-visits", signal = "smoothed_cli",
#                  start_day = "2020-05-01", end_day = "2020-05-01",
#                  geo_type = "state", geo_values = "pa", as_of = "2020-05-07")
# JHU Signals can be found here:
# https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/jhu-csse.html
all_forecast_dates =
c("2020-04-12","2020-04-19","2020-04-26","2020-05-03",
"2020-05-10","2020-05-17","2020-05-24","2020-05-31",
"2020-06-07","2020-06-14","2020-06-21","2020-06-28",
"2020-07-05",'2020-07-12','2020-07-19',
'2020-07-26','2020-08-02','2020-08-09',
'2020-08-16','2020-08-23','2020-08-30',
'2020-09-06','2020-09-13')
state_list <- read.csv("list_of_states.csv")
state_list_lower <- mutate_all(state_list,.funs=tolower)
for (s_j in 26:length(state_list_lower$x)){
curr_state = state_list_lower[s_j,1]
print(curr_state)
for (fd_j in 5:length(all_forecast_dates)){
curr_forecast_date = all_forecast_dates[fd_j]
print(curr_forecast_date)
sig1 <- suppressMessages(covidcast_signal(data_source = "jhu-csse", signal = "confirmed_cumulative_num",
start_day = "2020-01-22", end_day = curr_forecast_date,
geo_type = "state", geo_values = curr_state, as_of = as.Date(curr_forecast_date)+1))
sig2 <- suppressMessages(covidcast_signal(data_source = "jhu-csse", signal = "deaths_cumulative_num",
start_day = "2020-01-22", end_day = curr_forecast_date ,
geo_type = "state", geo_values = curr_state, as_of = as.Date(curr_forecast_date)+1))
sig3 <- suppressMessages(covidcast_signal(data_source = "jhu-csse", signal = "confirmed_incidence_num",
start_day = "2020-01-22", end_day = curr_forecast_date ,
geo_type = "state", geo_values = curr_state, as_of = as.Date(curr_forecast_date)+1))
sig4 <- suppressMessages(covidcast_signal(data_source = "jhu-csse", signal = "deaths_incidence_num",
start_day = "2020-01-22", end_day = curr_forecast_date ,
geo_type = "state", geo_values = curr_state, as_of = as.Date(curr_forecast_date)+1))
# sig6 <- suppressMessages(covidcast_signal(data_source = "hospital-admissions", signal = "smoothed_adj_covid19_from_claims",
#                                           start_day = "2020-01-01", end_day = curr_forecast_date ,
#                                           geo_type = "state", geo_values = curr_state, as_of = "2020-05-07"))
#
# sig5 <- sig6
# sig5$value <- cumsum(sig6$value)
curr_df <- data.frame(date = sig1$time_value,
positive = sig1$value,
death = sig2$value,
positiveIncrease = sig3$value,
deathIncrease = sig4$value
)
curr_filename <- sprintf("state_%s_%s.csv",state_list[s_j,1],curr_forecast_date)
write.csv(curr_df,curr_filename,row.names = FALSE)
}
}
# COVIDcast EpiData
# Updated 11/11/20
# # To install with vignettes:
# devtools::install_github("cmu-delphi/covidcast", ref = "main",
#                          subdir = "R-packages/covidcast",
#                          build_vignettes = TRUE,
#                          dependencies = TRUE)
# # To install without vignettes:
# devtools::install_github("cmu-delphi/covidcast", ref = "main",
#                          subdir = "R-packages/covidcast")
library(covidcast)
library(dplyr)
setwd("~/Dropbox/Research-Materials-Hannah/covid_related/COVIDcast_epidata")
# # Example of downloading data
# covidcast_signal(data_source = "doctor-visits", signal = "smoothed_cli",
#                  start_day = "2020-05-01", end_day = "2020-05-01",
#                  geo_type = "state", geo_values = "pa", as_of = "2020-05-07")
# JHU Signals can be found here:
# https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/jhu-csse.html
all_forecast_dates =
c("2020-04-12","2020-04-19","2020-04-26","2020-05-03",
"2020-05-10","2020-05-17","2020-05-24","2020-05-31",
"2020-06-07","2020-06-14","2020-06-21","2020-06-28",
"2020-07-05",'2020-07-12','2020-07-19',
'2020-07-26','2020-08-02','2020-08-09',
'2020-08-16','2020-08-23','2020-08-30',
'2020-09-06','2020-09-13')
state_list <- read.csv("list_of_states.csv")
state_list_lower <- mutate_all(state_list,.funs=tolower)
for (s_j in 26:length(state_list_lower$x)){
curr_state = state_list_lower[s_j,1]
print(curr_state)
for (fd_j in 5:length(all_forecast_dates)){
curr_forecast_date = all_forecast_dates[fd_j]
print(curr_forecast_date)
sig1 <- suppressMessages(covidcast_signal(data_source = "jhu-csse", signal = "confirmed_cumulative_num",
start_day = "2020-01-22", end_day = curr_forecast_date,
geo_type = "state", geo_values = curr_state, as_of = as.Date(curr_forecast_date)+2))
sig2 <- suppressMessages(covidcast_signal(data_source = "jhu-csse", signal = "deaths_cumulative_num",
start_day = "2020-01-22", end_day = curr_forecast_date ,
geo_type = "state", geo_values = curr_state, as_of = as.Date(curr_forecast_date)+2))
sig3 <- suppressMessages(covidcast_signal(data_source = "jhu-csse", signal = "confirmed_incidence_num",
start_day = "2020-01-22", end_day = curr_forecast_date ,
geo_type = "state", geo_values = curr_state, as_of = as.Date(curr_forecast_date)+2))
sig4 <- suppressMessages(covidcast_signal(data_source = "jhu-csse", signal = "deaths_incidence_num",
start_day = "2020-01-22", end_day = curr_forecast_date ,
geo_type = "state", geo_values = curr_state, as_of = as.Date(curr_forecast_date)+2))
# sig6 <- suppressMessages(covidcast_signal(data_source = "hospital-admissions", signal = "smoothed_adj_covid19_from_claims",
#                                           start_day = "2020-01-01", end_day = curr_forecast_date ,
#                                           geo_type = "state", geo_values = curr_state, as_of = "2020-05-07"))
#
# sig5 <- sig6
# sig5$value <- cumsum(sig6$value)
curr_df <- data.frame(date = sig1$time_value,
positive = sig1$value,
death = sig2$value,
positiveIncrease = sig3$value,
deathIncrease = sig4$value
)
curr_filename <- sprintf("state_%s_%s.csv",state_list[s_j,1],curr_forecast_date)
write.csv(curr_df,curr_filename,row.names = FALSE)
}
}
warnings()
options(nwarnings = 1000)
warnings()
