geom_point(mapping=aes(target_end_date,value,
group=target,color=as.character(quantile)))+
# scale_color_hue(l=40, c=35)+
theme(legend.position ="none")+
geom_line(data=compare_df,mapping=aes(date,death))
#
# ggplot(data=submit_inc)+
#   geom_point(mapping=aes(target_end_date,value,
#                          group=target,color=as.character(quantile)))+
#   # scale_color_hue(l=40, c=35)+
#   theme(legend.position ="none")+
#   geom_line(data=compare_df,mapping=aes(date,deathIncrease))
# calibration_of_forecasts
# Updated 7/21/20      HRB
#                      Load forecast submission and assess calibration
#                      Use Covid Tracking data as the truth
#                      Score v2 of EpiCovDA
setwd("/users/hannah.biegel")
folder_path <- paste0("Dropbox/UA/Research/HRB_COVID_code_v2")
setwd(folder_path)
library("cdlTools") # package to convert fips to state abbreviations
calibration_scores <- data.frame()
forecasts = read.csv(
sprintf("r_code/UA-EpiCovDA-CA/%s-UA-EpiCovDA.csv",
"2020-04-12"))
forecasted_locations = forecasts[(forecasts$target=="1 wk ahead cum death")&
(forecasts$type=="point"),"location"]
all_forecast_dates =
c("2020-04-12","2020-04-19","2020-04-26","2020-05-03",
"2020-05-10","2020-05-17","2020-05-24","2020-05-31",
"2020-06-07","2020-06-14","2020-06-21","2020-06-28",
"2020-07-05")
# make a single data frame for all the forecasts
all_forecasts = data.frame()
for (forecast_date in all_forecast_dates){
# forecast_date = "2020-05-31"
curr_forecasts = read.csv(
sprintf("r_code/UA-EpiCovDA-CA/%s-UA-EpiCovDA.csv",
forecast_date))
all_forecasts = rbind(all_forecasts, curr_forecasts)
}
submission_scores <- data.frame()
for (fips_loc in forecasted_locations){
curr_abbrev = fips(fips_loc,to="Abbreviation")
if (fips_loc == "US"){
curr_abbrev = "US"
}
state_data = read.csv(paste0("state_hosp_data/state_",curr_abbrev,".csv"))
for (forecast_date in all_forecast_dates){
curr_CI_width = 0.95
curr_Uquant = 0.5 + curr_CI_width/2
curr_Lquant = round(0.5 - curr_CI_width/2,3)
for (j in 1:4){
curr_target = sprintf("%d wk ahead cum death",j)
curr_L = all_forecasts[(all_forecasts$target==curr_target)&
(all_forecasts$type=="quantile")&
(all_forecasts$location==fips_loc)&
(all_forecasts$quantile==.025)&
(all_forecasts$forecast_date==forecast_date),
c("target_end_date","value")]
curr_U = all_forecasts[(all_forecasts$target==curr_target)&
(all_forecasts$type=="quantile")&
(all_forecasts$location==fips_loc)&
(all_forecasts$quantile==curr_Uquant)&
(all_forecasts$forecast_date==forecast_date),
c("target_end_date","value")]
if (as.Date(curr_U$target_end_date[1]) <= as.Date("2020-07-26")){
curr_truth = state_data[as.Date(state_data$date) ==
as.Date(curr_U$target_end_date[1]),"death"]
curr_capt_truth = (curr_truth <= curr_U$value) & (curr_truth >= curr_L$value)
temp_df = data.frame(location = curr_abbrev,target = curr_target,
Lbound = curr_L$value, Ubound = curr_U$value,
truth = curr_truth,
captured_truth = curr_capt_truth,
CI_width = curr_CI_width,
forecast_date = forecast_date,
target_end_date = curr_U$target_end_date[1])
submission_scores = rbind(submission_scores,temp_df)
}
}
}
state_scores <- data.frame(CI_width = curr_CI_width, location = curr_abbrev,
percent_success =
sum(submission_scores[submission_scores$location == curr_abbrev,"captured_truth"])/
length(submission_scores[submission_scores$location == curr_abbrev,"captured_truth"]))
calibration_scores <- rbind(calibration_scores,state_scores)
}
st = submission_scores[(submission_scores$location=="IL")&(submission_scores$target=="1 wk ahead cum death"),]
sum(st$captured_truth)/length(st$captured_truth)
plot(as.Date(st$target_end_date),st$Ubound,type="l")+
lines(as.Date(st$target_end_date),st$Lbound)+
lines(as.Date(st$target_end_date),st$truth,col="red")
st2 = submission_scores2[(submission_scores2$location=="AZ")&(submission_scores2$target=="1 wk ahead cum death"),]
sum(st2$captured_truth)/length(st2$captured_truth)
plot(as.Date(st2$target_end_date),st2$Ubound,type="l")+
lines(as.Date(st2$target_end_date),st2$Lbound)+
lines(as.Date(st2$target_end_date),st2$truth,col="red")
st = submission_scores[(submission_scores$location=="IL")&(submission_scores$target=="1 wk ahead cum death"),]
sum(st$captured_truth)/length(st$captured_truth)
plot(as.Date(st$target_end_date),st$Ubound,type="l")+
lines(as.Date(st$target_end_date),st$Lbound)+
lines(as.Date(st$target_end_date),st$truth,col="red")
st = submission_scores[(submission_scores$location=="IL")&(submission_scores$target=="2 wk ahead cum death"),]
sum(st$captured_truth)/length(st$captured_truth)
plot(as.Date(st$target_end_date),st$Ubound,type="l")+
lines(as.Date(st$target_end_date),st$Lbound)+
lines(as.Date(st$target_end_date),st$truth,col="red")
st2 = submission_scores2[(submission_scores2$location=="AZ")&(submission_scores2$target=="1 wk ahead cum death"),]
st = submission_scores[(submission_scores$location=="IL")&(submission_scores$target=="2 wk ahead cum death"),]
sum(st$captured_truth)/length(st$captured_truth)
plot(as.Date(st$target_end_date),st$Ubound,type="l")+
lines(as.Date(st$target_end_date),st$Lbound)+
lines(as.Date(st$target_end_date),st$truth,col="red")
st = submission_scores[(submission_scores$location=="IL")&(submission_scores$target=="3 wk ahead cum death"),]
sum(st$captured_truth)/length(st$captured_truth)
plot(as.Date(st$target_end_date),st$Ubound,type="l")+
lines(as.Date(st$target_end_date),st$Lbound)+
lines(as.Date(st$target_end_date),st$truth,col="red")
st = submission_scores[(submission_scores$location=="IL")&(submission_scores$target=="1 wk ahead cum death"),]
sum(st$captured_truth)/length(st$captured_truth)
plot(as.Date(st$target_end_date),st$Ubound,type="l")+
lines(as.Date(st$target_end_date),st$Lbound)+
lines(as.Date(st$target_end_date),st$truth,col="red")
plot(as.Date(st$target_end_date),st$Ubound,type="l")+
lines(as.Date(st$target_end_date),st$Lbound)+
points(as.Date(st$target_end_date),st$truth,col="red")
lines
plot(as.Date(st$target_end_date),st$Ubound,type="l")+
lines(as.Date(st$target_end_date),st$Lbound)+
lines(as.Date(st$target_end_date),st$truth,col="red")
# save_covidtracking_death_forecasts_v1
## Updated 7/09/20
# Save SIRICC forecasts version 2.0
# Update to follow new submission guidelines
# Save to new folder and with CovidTrackingProject as current cumulative values
setwd("/Users/hannah.biegel/Dropbox/Research-Materials-Hannah/covid_related/HRB_COVID_code/r_code")
library(R.matlab)
# library(zoo)
library("cdlTools")
state_list <- read.csv("../state_hosp_data/list_of_states.csv")
# state_num_days <- read.csv("../state_hosp_data/list_of_num_days.csv")
# state_num_days[53,1] <- 145 #138 #131 # 122, 117
all_states <-  14 #c(1:39,41:53)
all_forecast_dates =
c("2020-04-12","2020-04-19","2020-04-26","2020-05-03",
"2020-05-10","2020-05-17","2020-05-24","2020-05-31",
"2020-06-07","2020-06-14","2020-06-21","2020-06-28",
"2020-07-05")
# all_forecast_dates =
#   c("2020-04-10","2020-04-17","2020-04-24","2020-05-01",
#     "2020-05-08","2020-05-15","2020-05-22","2020-05-29",
#     "2020-06-05","2020-06-12","2020-06-19","2020-06-26",
#     "2020-07-03")
all_data_choices = c('DC','DG')
for (forecast_date in all_forecast_dates){
# forecast_date <- '2020-04-12'  #YYYY-MM-DD
# next_sat <- as.Date('2020-07-11') # 1 wk ahead forecast date
next_sat_ind <- 6
next_sat <- next_sat_ind + as.Date(forecast_date)
tarType <- c("%d day ahead cum death","%d day ahead inc death")
tarTypeCum <- c("%d wk ahead cum death","%d wk ahead inc death")
quants_wanted <- c(0.01, 0.025, seq(0.05, 0.95, by = 0.05), 0.975, 0.99);
submit_df <- data.frame()
for (st in all_states){
state_id <- state_list[st,1]
state_id_fips = fips(state_id)
if (st == 53){
state_id_fips = "US"
}
if (state_id_fips < 10){
state_id_fips = paste0("0",state_id_fips)
}
print(state_id_fips)
for (k in 1:2){
data_choice <- all_data_choices[k]
curr_tar_type<- tarType[k]
curr_tar_typeCum<- tarTypeCum[k]
forecastfile = sprintf('../quantile_forecasts/%s_%s_%s.csv',
data_choice,state_id,forecast_date)
temp_df<- read.csv("../state_hosp_data/state_US.csv")
temp_df$date <- as.Date(temp_df$date)
current_deaths = temp_df[temp_df$date==(as.Date(forecast_date)),"death"]
if (st < 53){
JHU_state_file = sprintf('../state_hosp_data/state_%s.csv',state_id)
curr_JHU <- read.csv(JHU_state_file)
curr_JHU$date <- as.Date(curr_JHU$date)
current_deaths = curr_JHU[curr_JHU$date==(as.Date(forecast_date)),"death"]
# NN = length(curr_JHU$death)
# current_deaths = curr_JHU$death[NN]
# current_deaths
}
update_term = current_deaths
if (data_choice == 'DG'){
update_term = 0
}
day_ahead_quants = read.csv(forecastfile,header=FALSE)
ndp = length(day_ahead_quants[1,])
#
# for (i in 1:ndp){
#
#   target <- sprintf(curr_tar_type,i)
#   value <- day_ahead_quants[,i] + update_term
#
#   curr_df <- data.frame(value)
#   curr_df$target <- target
#   curr_df$location <- as.character(state_id_fips)
#   curr_df$location_name <- state_id
#   curr_df$type <- "quantile"
#   curr_df$quantile <- quants_wanted
#   curr_df$target_end_date <- as.Date(forecast_date)+i
#   curr_df$forecast_date <- forecast_date
#
#   curr_df <- curr_df[,c("forecast_date","target","target_end_date",
#                         "location","location_name",
#                         "type","quantile","value")]
#
#   point_df <- data.frame()
#   point_df <- curr_df[1,]
#   point_df$type <- "point"
#   point_df$value <- curr_df$value[12] #median
#   point_df$quantile <- NA
#
#
#   submit_df <- rbind(submit_df,point_df,curr_df)
#
# }
# wk ahead forecasts
for (j in 0:3){
target <- sprintf(curr_tar_typeCum,j+1)
value <- day_ahead_quants[,next_sat_ind+7*j] + update_term
if (k == 2){
forecastfile2 = sprintf('../quantile_forecasts/%s_wk_%s_%s.csv',
data_choice,state_id,forecast_date)
wk_ahead_quants = read.csv(forecastfile2,header=FALSE)
value <- wk_ahead_quants[,next_sat_ind+7*j]
}
curr_df <- data.frame(value)
curr_df$target <- target
curr_df$location <- as.character(state_id_fips)
# curr_df$location_name <- state_id
curr_df$type <- "quantile"
curr_df$quantile <- quants_wanted
curr_df$target_end_date <- next_sat+7*(j)
curr_df$forecast_date <- forecast_date
curr_df <- curr_df[,c("forecast_date","target","target_end_date",
"location",
"type","quantile","value")]
point_df <- data.frame()
point_df <- curr_df[1,]
point_df$type <- "point"
point_df$value <- curr_df$value[12] #median
point_df$quantile <- NA
submit_df <- rbind(submit_df,point_df,curr_df)
}
}
}
# submit_df$forecast_date = as.Date(submit_df$forecast_date)+2
filename = sprintf("UA-EpiCovDA-CA/%s-UA-EpiCovDA.csv",as.Date(forecast_date))
write.csv(submit_df,filename,row.names=FALSE)
}
source("code/validation/functions_plausibility.R")
rt <- validate_file(filename)
comp_name <- sprintf("../state_hosp_data/state_%s.csv",state_list[all_states[length(all_states)],1])
compare_df = read.csv(comp_name)
compare_df$date <- as.Date(compare_df$date,format = "%Y-%m-%d")
require(ggplot2)
submit_cuml <- submit_df[grepl("cum",submit_df$target),,drop=FALSE]
submit_inc <- submit_df[grepl("inc",submit_df$target),,drop=FALSE]
ggplot(data=submit_cuml)+
geom_point(mapping=aes(target_end_date,value,
group=target,color=as.character(quantile)))+
# scale_color_hue(l=40, c=35)+
theme(legend.position ="none")+
geom_line(data=compare_df,mapping=aes(date,death))
#
# ggplot(data=submit_inc)+
#   geom_point(mapping=aes(target_end_date,value,
#                          group=target,color=as.character(quantile)))+
#   # scale_color_hue(l=40, c=35)+
#   theme(legend.position ="none")+
#   geom_line(data=compare_df,mapping=aes(date,deathIncrease))
# calibration_of_forecasts
# Updated 7/21/20      HRB
#                      Load forecast submission and assess calibration
#                      Use Covid Tracking data as the truth
#                      Score v2 of EpiCovDA
setwd("/users/hannah.biegel")
folder_path <- paste0("Dropbox/UA/Research/HRB_COVID_code_v2")
setwd(folder_path)
library("cdlTools") # package to convert fips to state abbreviations
calibration_scores <- data.frame()
forecasts = read.csv(
sprintf("r_code/UA-EpiCovDA-CA/%s-UA-EpiCovDA.csv",
"2020-04-12"))
forecasted_locations = forecasts[(forecasts$target=="1 wk ahead cum death")&
(forecasts$type=="point"),"location"]
all_forecast_dates =
c("2020-04-12","2020-04-19","2020-04-26","2020-05-03",
"2020-05-10","2020-05-17","2020-05-24","2020-05-31",
"2020-06-07","2020-06-14","2020-06-21","2020-06-28",
"2020-07-05")
# make a single data frame for all the forecasts
all_forecasts = data.frame()
for (forecast_date in all_forecast_dates){
# forecast_date = "2020-05-31"
curr_forecasts = read.csv(
sprintf("r_code/UA-EpiCovDA-CA/%s-UA-EpiCovDA.csv",
forecast_date))
all_forecasts = rbind(all_forecasts, curr_forecasts)
}
submission_scores <- data.frame()
for (fips_loc in forecasted_locations){
curr_abbrev = fips(fips_loc,to="Abbreviation")
if (fips_loc == "US"){
curr_abbrev = "US"
}
state_data = read.csv(paste0("state_hosp_data/state_",curr_abbrev,".csv"))
for (forecast_date in all_forecast_dates){
curr_CI_width = 0.95
curr_Uquant = 0.5 + curr_CI_width/2
curr_Lquant = round(0.5 - curr_CI_width/2,3)
for (j in 1:4){
curr_target = sprintf("%d wk ahead cum death",j)
curr_L = all_forecasts[(all_forecasts$target==curr_target)&
(all_forecasts$type=="quantile")&
(all_forecasts$location==fips_loc)&
(all_forecasts$quantile==.025)&
(all_forecasts$forecast_date==forecast_date),
c("target_end_date","value")]
curr_U = all_forecasts[(all_forecasts$target==curr_target)&
(all_forecasts$type=="quantile")&
(all_forecasts$location==fips_loc)&
(all_forecasts$quantile==curr_Uquant)&
(all_forecasts$forecast_date==forecast_date),
c("target_end_date","value")]
if (as.Date(curr_U$target_end_date[1]) <= as.Date("2020-07-26")){
curr_truth = state_data[as.Date(state_data$date) ==
as.Date(curr_U$target_end_date[1]),"death"]
curr_capt_truth = (curr_truth <= curr_U$value) & (curr_truth >= curr_L$value)
temp_df = data.frame(location = curr_abbrev,target = curr_target,
Lbound = curr_L$value, Ubound = curr_U$value,
truth = curr_truth,
captured_truth = curr_capt_truth,
CI_width = curr_CI_width,
forecast_date = forecast_date,
target_end_date = curr_U$target_end_date[1])
submission_scores = rbind(submission_scores,temp_df)
}
}
}
state_scores <- data.frame(CI_width = curr_CI_width, location = curr_abbrev,
percent_success =
sum(submission_scores[submission_scores$location == curr_abbrev,"captured_truth"])/
length(submission_scores[submission_scores$location == curr_abbrev,"captured_truth"]))
calibration_scores <- rbind(calibration_scores,state_scores)
}
st = submission_scores[(submission_scores$location=="IL")&(submission_scores$target=="1 wk ahead cum death"),]
sum(st$captured_truth)/length(st$captured_truth)
plot(as.Date(st$target_end_date),st$Ubound,type="l")+
lines(as.Date(st$target_end_date),st$Lbound)+
lines(as.Date(st$target_end_date),st$truth,col="red")
st2 = submission_scores2[(submission_scores2$location=="AZ")&(submission_scores2$target=="1 wk ahead cum death"),]
sum(st2$captured_truth)/length(st2$captured_truth)
plot(as.Date(st2$target_end_date),st2$Ubound,type="l")+
lines(as.Date(st2$target_end_date),st2$Lbound)+
lines(as.Date(st2$target_end_date),st2$truth,col="red")
st = submission_scores[(submission_scores$location=="IL")&(submission_scores$target=="1 wk ahead cum death"),]
sum(st$captured_truth)/length(st$captured_truth)
plot(as.Date(st$target_end_date),st$Ubound,type="l")+
lines(as.Date(st$target_end_date),st$Lbound)+
lines(as.Date(st$target_end_date),st$truth,col="red")
st = submission_scores[(submission_scores$location=="IL")&(submission_scores$target=="2 wk ahead cum death"),]
sum(st$captured_truth)/length(st$captured_truth)
plot(as.Date(st$target_end_date),st$Ubound,type="l")+
lines(as.Date(st$target_end_date),st$Lbound)+
lines(as.Date(st$target_end_date),st$truth,col="red")
st = submission_scores[(submission_scores$location=="IL")&(submission_scores$target=="3 wk ahead cum death"),]
sum(st$captured_truth)/length(st$captured_truth)
plot(as.Date(st$target_end_date),st$Ubound,type="l")+
lines(as.Date(st$target_end_date),st$Lbound)+
lines(as.Date(st$target_end_date),st$truth,col="red")
st = submission_scores[(submission_scores$location=="IL")&(submission_scores$target=="4 wk ahead cum death"),]
sum(st$captured_truth)/length(st$captured_truth)
plot(as.Date(st$target_end_date),st$Ubound,type="l")+
lines(as.Date(st$target_end_date),st$Lbound)+
lines(as.Date(st$target_end_date),st$truth,col="red")
st = submission_scores[(submission_scores$location=="IL")&(submission_scores$target=="1 wk ahead cum death"),]
sum(st$captured_truth)/length(st$captured_truth)
plot(as.Date(st$target_end_date),st$Ubound,type="l")+
lines(as.Date(st$target_end_date),st$Lbound)+
lines(as.Date(st$target_end_date),st$truth,col="red")
# download covidtracking.com data
setwd("/users/hannah.biegel")
folder_path <- paste0("Dropbox/Research-Materials-Hannah/covid_related/HRB_COVID_code")
setwd(folder_path)
require("httr")
require("jsonlite")
res = GET("https://covidtracking.com/api/v1/states/daily.json")
curr_state_data = fromJSON(rawToChar(res$content))
curr_state_data$date <- as.Date(as.character(curr_state_data$date),format="%Y%m%d")
state_abbr = read.csv("state_hosp_data/list_of_states.csv")
state_abbr = state_abbr$x
state_num_days <- c()
for (i in 1:length(state_abbr)){
temp_sub = subset(curr_state_data,state==state_abbr[i])
temp_sub = temp_sub[order(temp_sub$date),]
temp_save <- subset(temp_sub,select=c("date","positive",
"death",
"positiveIncrease","deathIncrease",
"hospitalized","hospitalizedIncrease","hospitalizedCurrently"))
temp_save <- temp_save[order(temp_save$date),]
# temp_save[is.na(temp_save)] <- 0;
temp_save[as.Date(temp_save$date)< as.Date('2020-04-01'),]
# temp_name <- paste("state_hosp_data/state_",state_abbr[i],".csv",sep="")
temp_name <- paste("state_data_early/state_",state_abbr[i],".csv",sep="")
write.csv(temp_save,temp_name,row.names=FALSE)
}
## save new national data
res_nat = GET("https://covidtracking.com/api/v1/us/daily.json")
curr_nat_data = fromJSON(rawToChar(res_nat$content))
curr_nat_data$date <- as.Date(as.character(curr_nat_data$date),format="%Y%m%d")
curr_nat <- curr_nat_data[order(curr_nat_data$date),]
save_nat_df <- subset(curr_nat,select=c("date","positive",
"death",
"positiveIncrease","deathIncrease",                                                    "hospitalized",
"hospitalizedIncrease",
"hospitalizedCurrently"))
save_nat_df[is.na(save_nat_df)] <- 0;
# temp_name_nat <- paste("state_hosp_data/state_US.csv",sep="")
temp_name_nat <- paste("state_data_early/state_US.csv",sep="")
write.csv(save_nat_df,temp_name_nat,row.names=FALSE)
# download covidtracking.com data
setwd("/users/hannah.biegel")
folder_path <- paste0("Dropbox/Research-Materials-Hannah/covid_related/HRB_COVID_code")
setwd(folder_path)
require("httr")
require("jsonlite")
res = GET("https://covidtracking.com/api/v1/states/daily.json")
curr_state_data = fromJSON(rawToChar(res$content))
curr_state_data$date <- as.Date(as.character(curr_state_data$date),format="%Y%m%d")
state_abbr = read.csv("state_hosp_data/list_of_states.csv")
state_abbr = state_abbr$x
state_num_days <- c()
for (i in 1:length(state_abbr)){
temp_sub = subset(curr_state_data,state==state_abbr[i])
temp_sub = temp_sub[order(temp_sub$date),]
temp_save <- subset(temp_sub,select=c("date","positive",
"death",
"positiveIncrease","deathIncrease",
"hospitalized","hospitalizedIncrease","hospitalizedCurrently"))
temp_save <- temp_save[order(temp_save$date),]
# temp_save[is.na(temp_save)] <- 0;
temp_save = temp_save[as.Date(temp_save$date)< as.Date('2020-04-01'),]
# temp_name <- paste("state_hosp_data/state_",state_abbr[i],".csv",sep="")
temp_name <- paste("state_data_early/state_",state_abbr[i],".csv",sep="")
write.csv(temp_save,temp_name,row.names=FALSE)
}
## save new national data
res_nat = GET("https://covidtracking.com/api/v1/us/daily.json")
curr_nat_data = fromJSON(rawToChar(res_nat$content))
curr_nat_data$date <- as.Date(as.character(curr_nat_data$date),format="%Y%m%d")
curr_nat <- curr_nat_data[order(curr_nat_data$date),]
save_nat_df <- subset(curr_nat,select=c("date","positive",
"death",
"positiveIncrease","deathIncrease",                                                    "hospitalized",
"hospitalizedIncrease",
"hospitalizedCurrently"))
save_nat_df[is.na(save_nat_df)] <- 0;
# temp_name_nat <- paste("state_hosp_data/state_US.csv",sep="")
temp_name_nat <- paste("state_data_early/state_US.csv",sep="")
write.csv(save_nat_df,temp_name_nat,row.names=FALSE)
# download covidtracking.com data
setwd("/users/hannah.biegel")
folder_path <- paste0("Dropbox/Research-Materials-Hannah/covid_related/HRB_COVID_code")
setwd(folder_path)
require("httr")
require("jsonlite")
res = GET("https://covidtracking.com/api/v1/states/daily.json")
curr_state_data = fromJSON(rawToChar(res$content))
curr_state_data$date <- as.Date(as.character(curr_state_data$date),format="%Y%m%d")
state_abbr = read.csv("state_hosp_data/list_of_states.csv")
state_abbr = state_abbr$x
state_num_days <- c()
for (i in 1:length(state_abbr)){
temp_sub = subset(curr_state_data,state==state_abbr[i])
temp_sub = temp_sub[order(temp_sub$date),]
temp_save <- subset(temp_sub,select=c("date","positive",
"death",
"positiveIncrease","deathIncrease",
"hospitalized","hospitalizedIncrease","hospitalizedCurrently"))
temp_save <- temp_save[order(temp_save$date),]
# temp_save[is.na(temp_save)] <- 0;
temp_save = temp_save[as.Date(temp_save$date)< as.Date('2020-04-01'),]
# temp_name <- paste("state_hosp_data/state_",state_abbr[i],".csv",sep="")
temp_name <- paste("state_data_early/state_",state_abbr[i],".csv",sep="")
write.csv(temp_save,temp_name,row.names=FALSE)
}
## save new national data
res_nat = GET("https://covidtracking.com/api/v1/us/daily.json")
curr_nat_data = fromJSON(rawToChar(res_nat$content))
curr_nat_data$date <- as.Date(as.character(curr_nat_data$date),format="%Y%m%d")
curr_nat <- curr_nat_data[order(curr_nat_data$date),]
save_nat_df <- subset(curr_nat,select=c("date","positive",
"death",
"positiveIncrease","deathIncrease",                                                    "hospitalized",
"hospitalizedIncrease",
"hospitalizedCurrently"))
save_nat_df[is.na(save_nat_df)] <- 0;
save_nat_df = save_nat_df[as.Date(save_nat_df$date)< as.Date('2020-04-01'),]
# temp_name_nat <- paste("state_hosp_data/state_US.csv",sep="")
temp_name_nat <- paste("state_data_early/state_US.csv",sep="")
write.csv(save_nat_df,temp_name_nat,row.names=FALSE)
